TITLE: Amy Sessions CSCI 200 Section A Snake Game

PROBLEM DESCRIPTION: My final project is the Snake Game(originally from Google). The user controls a snake that travels on a grid(by keyboard input). If the snake runs into a randomly generated apple its length increases by one. If the snake head runs into itself the game is  over. The game is won when the snake takes up the entire screen.


PROGRAM DOCUMENTATION: This program was goded in C++ using the SFML library. It is fairly straight forwards - just compile and run the file. Once you run it the snake will automatically start moving forwards. Then just use your arrow keys to change the snakes direction. Press either Q or escape to close the window once a lose or win message shows up. For grading purposes on line 179 of main.cpp you can change the number in the if statement to get the win screen to show up after one or two apples have been collected instead of needing to complete the entire game. From my original plan I made a lot of changes. Instead of having a seaparate class to generate the apples and move the snake and everything I just included it in the main.cpp. As it turns out a fair amount of the bubble program we wrote for A4 could be used in this final project and this method kept more of it intact. I also adjusted my snake class to represent only one square of the snake instead of an array of individual squares. This made it easier to move each piece in the appropriate direction. Please also don't spam the arrow keys...because of the way I set the direction and fail safed setting the direction for the pieces if you spam arrow keys you can move the snake backwards into itself and the game will say you lost even if it doesn't visually look like you ran into yourself. If I were to do this again I would use a LinkedList or a deque instead of a vector, but I wrote this before we learned what those were. If I were to continue working on this I would fix the button spam issue, make the snake move smoothly instead of the chunks it currently moves in, and I would try and make my snake have a bit more shape than just a bunch of full squares. 


CLASS DESCRIPTION: The class I created was the snake class. It stored position, direction, and a shape object to represent one section of the snake. Its functions were pretty much just setting the individual variables and moving the snake forward one which would update the position as well as the square object. Having this class made it really easy to deal with generating the list of objects and moving the snake forwards. In particular the direction variable was helpful. The class also made it really easy to manage the SFML objects and their respective positions on the board. 


LIST DATA STRUCTURE: So as I stated above for this project I did use a vector as my list structure, but that was because at the time of me writing this code it was the only list structure I knew how to use. If I were to redo this project I think a LinkedList would have been the best option for a list structure. The linked list would allow me to 1. Have the front of the list actually be the head of the snake(yes it currently generates so that the back of the snake is at index 0), 2. it would be much more efficient to delete from the tail and add to the head without requiring me to move every other index in the list, and 3. compared to a deque the linked list would allow me to traverse the list when I am drawing the sanke onto the board. 


FILE I/O: For my file I/O I made a game log that records the amount of time the game was running for, how long your snake was before the game ended, and what the outcome of the game was(win or lose). For every new game it just appends to the end of the file instead of overwriting the entire thing. I wouldn't say this is partucularly necissary but it is nice to see your stats and look for improvement in your games the more you play. It is something that the original game includes in the display when you load the game, but that would have been really difficult to implement in SFML so using a File I/O was a pretty good solution to still including that data.


REFLECTIONS: I learned way more about SFML and how that works as it updates in real time. I also found out how difficult 2D directional pieces can be when talking about graphics that change orientation. It doesn't show it in this version of my code, but I did make an attempt at both making my snake less blocky and having the snake move smoothly, but after several hours of thinking and fiddling I realized I was way over my head and to do that would take me several days minimum. I also realized how difficult game development can be. While I have some ideas of how to fix my bug with the player losing if buttons are spammed, none of them are really super easy to implement and I can imagine how if you had a more complicated game it could get really tricky to make bug fixes. Overall though I really enjoyed coding this, but with set 5 and 6 now under my belt I think I could make a much more cohesive version of this code using maybe some structs and LinkedLists. They would make the code much more cohesive and easier to read as well as probably making the smooth movement and visual aspects of the game much easier to implement.     